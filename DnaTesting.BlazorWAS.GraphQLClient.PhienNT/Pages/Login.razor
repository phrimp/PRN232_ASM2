@page "/login"
@inject AuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Login</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h3>Login</h3>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success">@successMessage</div>
                }

                <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                    <div class="mb-3">
                        <label class="form-label">Username:</label>
                        <InputText class="form-control" @bind-Value="loginModel.Username" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Password:</label>
                        <InputText type="password" class="form-control" @bind-Value="loginModel.Password" />
                    </div>

                    <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span>Loading...</span>
                        }
                        else
                        {
                            <span>Login</span>
                        }
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            var result = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

            if (result.Success)
            {
                successMessage = result.Message;
                // Wait a moment to show success message, then redirect
                await Task.Delay(1000);
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Unexpected error: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";
    }
}