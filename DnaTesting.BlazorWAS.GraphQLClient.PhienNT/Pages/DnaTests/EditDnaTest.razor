@page "/dnatests/edit/{Id:int}"
@inject DnaTestService DnaTestService
@inject NavigationManager Navigation

<PageTitle>Edit DNA Test</PageTitle>

<h3>Edit DNA Test #@Id</h3>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                @if (loading)
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else
                {
                    <EditForm Model="dnaTestModel" OnValidSubmit="HandleUpdate">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        <div class="mb-3">
                            <label class="form-label">Test Type: <span class="text-danger">*</span></label>
                            <InputSelect class="form-select" @bind-Value="dnaTestModel.TestType">
                                <option value="">-- Select Test Type --</option>
                                <option value="Paternity">Paternity</option>
                                <option value="Maternity">Maternity</option>
                                <option value="Sibling">Sibling</option>
                                <option value="Grandparent">Grandparent</option>
                                <option value="Relationship">Relationship</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => dnaTestModel.TestType)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Conclusion:</label>
                            <InputTextArea class="form-control" rows="3" @bind-Value="dnaTestModel.Conclusion"
                                           placeholder="Enter test conclusion (max 500 characters)" />
                            <ValidationMessage For="@(() => dnaTestModel.Conclusion)" class="text-danger" />
                            <div class="form-text">@(dnaTestModel.Conclusion?.Length ?? 0)/500 characters</div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Probability of Relationship (%):</label>
                            <InputNumber class="form-control" @bind-Value="dnaTestModel.ProbabilityOfRelationship"
                                         placeholder="0-100" step="0.01" />
                            <ValidationMessage For="@(() => dnaTestModel.ProbabilityOfRelationship)" class="text-danger" />
                            <div class="form-text">Enter value between 0 and 100</div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Relationship Index:</label>
                            <InputNumber class="form-control" @bind-Value="dnaTestModel.RelationshipIndex"
                                         placeholder="Enter positive number" step="0.01" />
                            <ValidationMessage For="@(() => dnaTestModel.RelationshipIndex)" class="text-danger" />
                            <div class="form-text">Must be a positive number</div>
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox class="form-check-input" @bind-Value="dnaTestModel.IsCompleted" id="isCompleted" />
                            <label class="form-check-label" for="isCompleted">Test Completed</label>
                        </div>

                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Update Test
                            </button>
                            <a href="/dnatests" class="btn btn-secondary">Cancel</a>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Validation Rules</h5>
            </div>
            <div class="card-body">
                <ul class="list-unstyled">
                    <li><i class="text-danger">*</i> <strong>Test Type:</strong> Required field</li>
                    <li><i class="text-info">•</i> <strong>Conclusion:</strong> Maximum 500 characters</li>
                    <li><i class="text-info">•</i> <strong>Probability:</strong> Between 0 and 100</li>
                    <li><i class="text-info">•</i> <strong>Relationship Index:</strong> Must be positive</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }

    private DnaTestEditModel dnaTestModel = new();
    private string errorMessage = "";
    private bool isSubmitting = false;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDnaTest();
    }

    private async Task LoadDnaTest()
    {
        loading = true;
        try
        {
            // For simplicity, we'll get all tests and find the one we need
            // In a real app, you'd have a GetById method
            var tests = await DnaTestService.GetAllDnaTestsAsync();
            var test = tests.FirstOrDefault(t => t.PhienNtid == Id);

            if (test != null)
            {
                dnaTestModel = new DnaTestEditModel
                    {
                        TestType = test.TestType,
                        Conclusion = test.Conclusion,
                        ProbabilityOfRelationship = test.ProbabilityOfRelationship,
                        RelationshipIndex = test.RelationshipIndex,
                        IsCompleted = test.IsCompleted ?? false
                    };
            }
            else
            {
                errorMessage = "DNA test not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading test: " + ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private async Task HandleUpdate()
    {
        isSubmitting = true;
        errorMessage = "";

        try
        {
            var input = new DnaTestInput
                {
                    PhienNtid = Id,
                    TestType = dnaTestModel.TestType,
                    Conclusion = dnaTestModel.Conclusion,
                    ProbabilityOfRelationship = dnaTestModel.ProbabilityOfRelationship,
                    RelationshipIndex = dnaTestModel.RelationshipIndex,
                    IsCompleted = dnaTestModel.IsCompleted
                };

            var result = await DnaTestService.UpdateDnaTestAsync(input);

            if (result > 0)
            {
                Navigation.NavigateTo("/dnatests");
            }
            else
            {
                errorMessage = "Failed to update DNA test. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error: " + ex.Message;
        }
        finally
        {
            isSubmitting = false;
        }
    }
}