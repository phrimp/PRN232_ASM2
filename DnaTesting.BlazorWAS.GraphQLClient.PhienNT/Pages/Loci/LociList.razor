@page "/loci"
@inject LociService LociService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Loci</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Loci</h3>
    <a href="/loci/create" class="btn btn-primary">Create New Locus</a>
</div>

<!-- Search Form -->
<div class="card mb-3">
    <div class="card-header">
        <h5 class="mb-0">Search & Filter</h5>
    </div>
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">Name:</label>
                <input type="text" class="form-control" @bind="searchName" placeholder="Search by locus name" />
            </div>
            <div class="col-md-4">
                <label class="form-label">CODIS Status:</label>
                <select class="form-select" @bind="searchCodisStatus">
                    <option value="">All</option>
                    <option value="codis">CODIS</option>
                    <option value="non-codis">Non-CODIS</option>
                </select>
            </div>
            <div class="col-md-4 d-flex align-items-end">
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary" @onclick="SearchLoci">
                        <i class="bi bi-search"></i> Search
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                        <i class="bi bi-x-circle"></i> Clear
                    </button>
                </div>
            </div>
        </div>
        @if (isSearching)
        {
            <div class="mt-2">
                <small class="text-muted">
                    <i class="bi bi-funnel"></i> Searching for:
                    @if (!string.IsNullOrEmpty(searchName))
                    {
                        <span class="badge bg-info me-1">Name: @searchName</span>
                    }
                    @if (!string.IsNullOrEmpty(searchCodisStatus))
                    {
                        <span class="badge bg-info me-1">Type: @(searchCodisStatus == "codis" ? "CODIS" : "Non-CODIS")</span>
                    }
                </small>
            </div>
        }
    </div>
</div>

@if (loading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (paginationResult.Items?.Any() == true)
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Mutation Rate</th>
                    <th>Description</th>
                    <th>Created</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var locus in paginationResult.Items)
                {
                    <tr>
                        <td>@locus.PhienNtid</td>
                        <td><strong>@locus.Name</strong></td>
                        <td>
                            <span class="badge @(locus.IsCodis == true ? "bg-success" : "bg-secondary")">
                                @(locus.IsCodis == true ? "CODIS" : "Non-CODIS")
                            </span>
                        </td>
                        <td>@(locus.MutationRate?.ToString("F4") ?? "N/A")</td>
                        <td>
                            @if (!string.IsNullOrEmpty(locus.Description))
                            {
                                <span title="@locus.Description">
                                    @(locus.Description.Length > 50 ? locus.Description.Substring(0, 47) + "..." : locus.Description)
                                </span>
                            }
                            else
                            {
                                <span class="text-muted">No description</span>
                            }
                        </td>
                        <td>@locus.CreatedAt?.ToString("yyyy-MM-dd")</td>
                        <td>
                            <a href="/loci/edit/@locus.PhienNtid" class="btn btn-sm btn-outline-primary">Edit</a>
                            <button class="btn btn-sm btn-outline-danger ms-1" @onclick="() => DeleteLocus(locus.PhienNtid)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Controls -->
    <nav aria-label="Loci pagination">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <span class="text-muted">
                    Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, paginationResult.TotalItems)
                    of @paginationResult.TotalItems entries
                    @if (isSearching)
                    {
                        <span class="text-info">(filtered)</span>
                    }
                </span>
            </div>
            <div>
                <ul class="pagination pagination-sm">
                    <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => GoToPage(1)" disabled="@(currentPage <= 1)">
                            First
                        </button>
                    </li>
                    <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage <= 1)">
                            Previous
                        </button>
                    </li>

                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(paginationResult.TotalPages, currentPage + 2); i++)
                    {
                        int pageNum = i;
                        <li class="page-item @(currentPage == pageNum ? "active" : "")">
                            <button class="page-link" @onclick="() => GoToPage(pageNum)">
                                @pageNum
                            </button>
                        </li>
                    }

                    <li class="page-item @(currentPage >= paginationResult.TotalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage >= paginationResult.TotalPages)">
                            Next
                        </button>
                    </li>
                    <li class="page-item @(currentPage >= paginationResult.TotalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="() => GoToPage(paginationResult.TotalPages)" disabled="@(currentPage >= paginationResult.TotalPages)">
                            Last
                        </button>
                    </li>
                </ul>
            </div>
        </div>

        <!-- Page Size Selector -->
        <div class="mt-2">
            <label class="form-label">Items per page:</label>
            <select class="form-select form-select-sm d-inline-block w-auto ms-2" @onchange="OnPageSizeChanged">
                <option value="5" selected="@(pageSize == 5)">5</option>
                <option value="10" selected="@(pageSize == 10)">10</option>
                <option value="20" selected="@(pageSize == 20)">20</option>
                <option value="50" selected="@(pageSize == 50)">50</option>
            </select>
        </div>
    </nav>
}
else
{
    <div class="alert alert-info">
        <h4>@(isSearching ? "No loci found matching your search" : "No loci found")</h4>
        <p>@(isSearching ? "Try adjusting your search criteria or clear the search to see all loci." : "Create your first locus to get started.")</p>
        @if (isSearching)
        {
            <button class="btn btn-outline-primary me-2" @onclick="ClearSearch">Clear Search</button>
        }
        <a href="/loci/create" class="btn btn-primary">Create Locus</a>
    </div>
}

@code {
    private PaginationResult<List<Locus>> paginationResult = new() { Items = new List<Locus>() };
    private bool loading = true;
    private int currentPage = 1;
    private int pageSize = 10;

    // Search parameters
    private string searchName = "";
    private string searchCodisStatus = "";
    private bool isSearching = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadLoci();
    }

    private async Task LoadLoci()
    {
        loading = true;
        try
        {
            if (isSearching)
            {
                bool? isCodisFilter = searchCodisStatus switch
                {
                    "codis" => true,
                    "non-codis" => false,
                    _ => null
                };

                paginationResult = await LociService.SearchLociAsync(
                    string.IsNullOrEmpty(searchName) ? null : searchName,
                    isCodisFilter,
                    currentPage,
                    pageSize);
            }
            else
            {
                paginationResult = await LociService.GetLociAsync(currentPage, pageSize);
            }
        }
        catch (Exception ex)
        {
            // Handle error
            paginationResult = new PaginationResult<List<Locus>> { Items = new List<Locus>() };
        }
        finally
        {
            loading = false;
        }
    }

    private async Task SearchLoci()
    {
        isSearching = !string.IsNullOrEmpty(searchName) || !string.IsNullOrEmpty(searchCodisStatus);
        currentPage = 1; // Reset to first page when searching
        await LoadLoci();
    }

    private async Task ClearSearch()
    {
        searchName = "";
        searchCodisStatus = "";
        isSearching = false;
        currentPage = 1;
        await LoadLoci();
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= paginationResult.TotalPages && page != currentPage)
        {
            currentPage = page;
            await LoadLoci();
        }
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            pageSize = newPageSize;
            currentPage = 1; // Reset to first page when changing page size
            await LoadLoci();
        }
    }

    private async Task DeleteLocus(int id)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete Locus #{id}?");

            if (confirmed)
            {
                var success = await LociService.DeleteLocusAsync(id);
                if (success)
                {
                    // If we deleted the last item on the page and it's not page 1, go to previous page
                    if (paginationResult.Items.Count == 1 && currentPage > 1)
                    {
                        currentPage--;
                    }
                    await LoadLoci();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to delete the locus.");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
}